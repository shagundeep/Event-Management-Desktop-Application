/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import java.sql.*;
import javax.swing.*;


/**
 *
 * @author shagu
 */
public class eventregistration extends javax.swing.JInternalFrame implements globalvariable{

    /**
     * Creates new form eventregistration
     */
    public eventregistration() {
        initComponents();
        registerbutton.setEnabled(false);//initialy it should be false.
        jButton1.setEnabled(false);
        Connection myconnection;
        
        try {//for connection.
            myconnection=DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);//if coonection is not made error should be handled so use try and catch
            try//for query.
            {
                String a="select * from event_type";//fetch all from that table.
                PreparedStatement mystatement =myconnection.prepareStatement(a);
                ResultSet myresult=mystatement.executeQuery();
                
                if(myresult.next())//returns 0 if not able to execute query
                {
                    //first time condition is checked so do-while.
                    do
                    {
                        eventtypebox.addItem(myresult.getString("eventtype"));
                }while(myresult.next());//second time condition checked.
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "No Event Type Added");
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(rootPane, "Error in query " + e.getMessage());
            }
            finally
            {
                myconnection.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane,"Error in Connection"+e.getMessage());
            
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        eventtypebox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        eventbox = new javax.swing.JComboBox<>();
        checkbutton = new javax.swing.JButton();
        registerbutton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Event Registration");

        jLabel1.setText("Enter SID");

        jLabel2.setText("Event Type");

        eventtypebox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Event Type" }));
        eventtypebox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventtypeboxActionPerformed(evt);
            }
        });

        jLabel3.setText("Choose Event");

        eventbox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Event" }));

        checkbutton.setText("Check");
        checkbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbuttonActionPerformed(evt);
            }
        });

        registerbutton.setText("Register");
        registerbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerbuttonActionPerformed(evt);
            }
        });

        jButton1.setText("<< Details Registration");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField1)
                                    .addComponent(eventtypebox, 0, 167, Short.MAX_VALUE)
                                    .addComponent(eventbox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(checkbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(registerbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jButton1)))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkbutton))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(eventtypebox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(eventbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addComponent(registerbutton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbuttonActionPerformed
        // TODO add your handling code here:
        
        Connection myconnection;
        
        try {//for connection.
            myconnection=DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);//if coonection is not made error should be handled so use try and catch
            try//for query.
            {
                String a="select * from participant_record where pid=?";//condition is checcked according to pid.
                PreparedStatement mystatement =myconnection.prepareStatement(a);
                mystatement.setString(1,jTextField1.getText());//sid enterd by us will be checked inthe pid column.
                ResultSet myresult=mystatement.executeQuery();
                
                if(myresult.next())//true if details are registered.
                {
                    JOptionPane.showMessageDialog(rootPane, "Details Registered");
                    registerbutton.setEnabled(true);
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "First Register Participant Details");
                    jButton1.setEnabled(true);
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(rootPane, "Error in query " + e.getMessage());
            }
            finally
            {
                myconnection.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane,"Error in Connection"+e.getMessage());
            
        }

        
    }//GEN-LAST:event_checkbuttonActionPerformed

    private void registerbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerbuttonActionPerformed
        // TODO add your handling code here:
        
        if(eventtypebox.getSelectedIndex()>0 && eventbox.getSelectedIndex()>0 )
        {
            Connection myconnection;
        
        try {//for connection
            myconnection=DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
            try//for query
            {
               
                String a="insert into event_register values(?,?,?)";
                PreparedStatement mystatement=myconnection.prepareStatement(a);
                mystatement.setString(1, jTextField1.getText());
                mystatement.setString(2,eventtypebox.getSelectedItem().toString() );
                mystatement.setString(3, eventbox.getSelectedItem().toString());
                
                
                if(mystatement.executeUpdate()>0)
                 {
                  JOptionPane.showMessageDialog(rootPane, "Registered Successfully ");
                  //jTextField1.setText(""); not empty for multiple registration.
                  eventtypebox.setSelectedIndex(0);
                  eventbox.setSelectedIndex(0);
                 }                
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(rootPane, "Error in query " + e.getMessage());
            }
            finally
            {
                myconnection.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error in Connection"+e.getMessage());
        }
        }
    }//GEN-LAST:event_registerbuttonActionPerformed

    private void eventtypeboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventtypeboxActionPerformed
        // TODO add your handling code here:
        if(eventtypebox.getSelectedIndex()>0)//then only events should appear.
        {
            Connection myconnection;
        
        try {//for connection.
            myconnection=DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);//if coonection is not made error should be handled so use try and catch
            try//for query.
            {
                String a="select * from event_detail where etype=?";//column fetch according to event type.//particular event of that eventtype should come.
                PreparedStatement mystatement =myconnection.prepareStatement(a);
                mystatement.setString(1,eventtypebox.getSelectedItem().toString());
                ResultSet myresult=mystatement.executeQuery();
                
                if(myresult.next())//returns 0 if no event of that type exist.
                {
                    eventbox.removeAllItems();
                    eventbox.addItem("Select Event");
                    do
                    {
                        eventbox.addItem(myresult.getString("ename"));//get value from the ename column in the database.
                }while(myresult.next());//second time condition checked.
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "No Event Added ");
                    eventbox.removeAllItems();
                    eventbox.addItem("Select Event");
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(rootPane, "Error in query " + e.getMessage());
            }
            finally
            {
                myconnection.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane,"Error in Connection"+e.getMessage());
            
        }
        }
        else
        {
            eventbox.removeAllItems();
            eventbox.addItem("Select Event");
        }
    }//GEN-LAST:event_eventtypeboxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        participantdetail obj=new participantdetail();
        parentframe.jDesktopPane1.add(obj);//we have to access the inside member.
        obj.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkbutton;
    private javax.swing.JComboBox<String> eventbox;
    private javax.swing.JComboBox<String> eventtypebox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton registerbutton;
    // End of variables declaration//GEN-END:variables
}
