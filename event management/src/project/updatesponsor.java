
package project;
import java.awt.Image;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import java.sql.*;
import java.io.*;
import javax.imageio.ImageIO;


public class updatesponsor extends javax.swing.JInternalFrame implements globalvariable {
    File myfile;
    String oldfilename;
    /**
     * Creates new form sponsor
     */
    public updatesponsor() {
        initComponents();
        updatebtn.setVisible(false);
        deletebtn.setVisible(false);
             Connection myconnection;
        
        try {//for connection.
            myconnection=DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);//if coonection is not made error should be handled so use try and catch
            try//for query.
            {
                String a="select * from event_type";//fetch all from that table.
                PreparedStatement mystatement =myconnection.prepareStatement(a);
                ResultSet myresult=mystatement.executeQuery();
                
                if(myresult.next())//returns 0 if not able to execute query
                {
                    //first time condition is checked so do-while.
                    do
                    {
                        etypebox.addItem(myresult.getString("eventtype"));
                }while(myresult.next());//second time condition checked.
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "No Event Type Added");
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(rootPane, "Error in query " + e.getMessage());
            }
            finally
            {
                myconnection.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane,"Error in Connection"+e.getMessage());
            
        }  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jFormattedTextField2 = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        uploadbtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        eventbox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        etypebox = new javax.swing.JComboBox<>();
        updatebtn = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        deletebtn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Update Sponsor ");

        jLabel1.setText("Company Name");

        jLabel2.setText("Manager Name");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel3.setText("Address");

        jLabel4.setText("Contact");

        try {
            jFormattedTextField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel5.setText("Amount");

        jFormattedTextField2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        uploadbtn.setText("Upload");
        uploadbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadbtnActionPerformed(evt);
            }
        });

        jLabel8.setText("Event");

        eventbox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Event" }));

        jLabel9.setText("Event Type");

        etypebox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Event Type" }));
        etypebox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                etypeboxActionPerformed(evt);
            }
        });

        updatebtn.setText("Update");
        updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebtnActionPerformed(evt);
            }
        });

        jLabel10.setText("Email");

        deletebtn.setText("Delete");
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });

        jButton2.setText("Fetch");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFormattedTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                            .addComponent(jFormattedTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eventbox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(etypebox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(uploadbtn)
                                .addGap(61, 61, 61)))
                        .addComponent(jLabel6))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(deletebtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(updatebtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jButton2))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uploadbtn)))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jFormattedTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(etypebox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(updatebtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deletebtn)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void etypeboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_etypeboxActionPerformed
        // TODO add your handling code here:
        if(etypebox.getSelectedIndex()>0)//then only events should appear.
        {
            Connection myconnection;

            try {//for connection.
                myconnection=DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);//if coonection is not made error should be handled so use try and catch
                try//for query.
                {
                    String a="select * from event_detail where etype=?";//column fetch according to event type.//particular event of that eventtype should come.
                    PreparedStatement mystatement =myconnection.prepareStatement(a);
                    mystatement.setString(1,etypebox.getSelectedItem().toString());
                    ResultSet myresult=mystatement.executeQuery();

                    if(myresult.next())//returns 0 if no event of that type exist.
                    {
                        eventbox.removeAllItems();
                        eventbox.addItem("Select Event");
                        do
                        {
                            eventbox.addItem(myresult.getString("ename"));//get value from the ename column in the database.
                        }while(myresult.next());//second time condition checked.
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(rootPane, "No Event Added");
                        eventbox.removeAllItems();
                        eventbox.addItem("Select Event");
                    }
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(rootPane, "Error in query " + e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane,"Error in Connection"+e.getMessage());

            }
        }
        else
        {
            eventbox.removeAllItems();
            eventbox.addItem("Select Event");
        }
    }//GEN-LAST:event_etypeboxActionPerformed

    private void updatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatebtnActionPerformed
        // TODO add your handling code here:
        //value of myfile is null if upload is not pressed
        boolean flag=true;
        String filename="";

            if(myfile!=null)//when uploaded my file will not be null.
            {
                if(myfile.length()<50000)
                {
                 flag=true;
                filename=new java.util.Date().getTime()+myfile.getName();//adding timestamp to our filenam so that it becomes unique.
                int i;
                FileInputStream input=null;
                FileOutputStream output=null;
                try{
                    input=new FileInputStream(myfile);
                    output=new FileOutputStream("sponsorimages\\"+filename);//writing the new  files in the 'SponsorImages' folder,int the project.
                    byte[] b=new byte[2048];//arrays of 2kb
                    while((i=input.read(b))!=-1)//we are reading files at 2kb per each iteration
                    {
                        output.write(b, 0, i);//copying from selected picture to sponsor images byte by byte.
                    }
                      
                }catch(Exception e)
                {
                    JOptionPane.showMessageDialog(rootPane,"Error in file copying"+e.getMessage());
                }
                finally
                {
                    try
                    {
                        input.close();
                        output.close();
                    }
                    catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(rootPane,"Error in closing file");
                    } 
                 }
                File oldimage=new File("sponsorimages\\"+oldfilename);
                if(!oldimage.getName().equals("default.png"))//if oldimage is deafult not need to delete it.but if it some other image it must get deleted.
                {
                    
                    oldimage.delete();      
                }
                }
                else
                {
                    flag=false;
                    JOptionPane.showMessageDialog(rootPane,"Image siz too big");
                }
                
            }
            else
            {
                //JOptionPane.showMessageDialog(rootPane,"No Image Uploaded");
                flag=true;
                filename=oldfilename;//it finds in our project.
                
            }
            //filename is set.
            //We have to update it in database also.
            if(flag)
            {
            Connection myconnection;
        
        try {//for connection
            myconnection=DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
            try//for query
            {
               
                String a="update sponsor_detail set managername=?,address=?,contact=?,email=?,amount=?,eventtype=?,eventname=?,image=? where companyname=?";
                PreparedStatement mystatement=myconnection.prepareStatement(a);
                mystatement.setString(9, jTextField1.getText());
                mystatement.setString(1, jTextField2.getText());
                mystatement.setString(2,jTextArea1.getText());
                mystatement.setString(3, jFormattedTextField1.getText());
                mystatement.setString(4,jTextField3.getText());
                mystatement.setString(5, jFormattedTextField2.getText());
                mystatement.setString(6,etypebox.getSelectedItem().toString() );
                mystatement.setString(7, eventbox.getSelectedItem().toString());
                mystatement.setString(8,filename);
                
                if(mystatement.executeUpdate()>0)
                 {
                  JOptionPane.showMessageDialog(rootPane, "Sponsor Updated Successfully ");
                  jTextField1.setText("");
                  jTextField2.setText("");
                  jTextArea1.setText("");
                  jFormattedTextField1.setText("");
                  jFormattedTextField2.setText("");
                  jTextField3.setText("");
                  etypebox.setSelectedIndex(0);
                  eventbox.setSelectedIndex(0);
                  jLabel7.setIcon(null);//to make image label empty.
                 }                
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(rootPane, "Error in query " + e.getMessage());
            }
            finally
            {
                myconnection.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error in Connection"+e.getMessage());
        }  
    }
    }//GEN-LAST:event_updatebtnActionPerformed

    private void uploadbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadbtnActionPerformed
        // TODO add your handling code here:
        JFileChooser myfilechooser=new JFileChooser();
        //we are applying filter as we have to show only images file and not rest.
        myfilechooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                if(f.isDirectory())
                { return true;}
                String extension=f.getName().substring(f.getName().lastIndexOf(".")+1);//we get the extension of all the files
                String allowed[]={"jpg","png","gif","jpeg","bmp"};
                //int count=0;
                for(String a:allowed)
                {
                    //count++;//loop works once only and get returns ;
                    if(a.equals(extension))
                    {
                        return true;
                    }

                }
                return false;// rest all files should not be shown.               
            }

            @Override
            public String getDescription() {
                return "All Picture Files";
            }
        });
        if(myfilechooser.showOpenDialog(rootPane)==JFileChooser.APPROVE_OPTION)
        {
            myfile=myfilechooser.getSelectedFile();
            try//there can be error in reading image.
            {
                Image showimg = ImageIO.read( new File(myfile.getAbsolutePath())).getScaledInstance( jLabel7.getWidth(), jLabel7.getHeight(), Image.SCALE_AREA_AVERAGING);//to fit in that label fix size.
                jLabel7.setIcon(new ImageIcon(showimg));
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(rootPane, "Cannot read image");
            }
        }
         
            
        //myfilechooser.showOpenDialog(rootPane);//it shows all types of files.
        
        
        
        
    }//GEN-LAST:event_uploadbtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Connection myconnection;
        try{
            myconnection=DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
            try{
                String a="select * from sponsor_detail where companyname like ?";
                PreparedStatement mystatement=myconnection.prepareStatement(a);
                mystatement.setString(1,"%"+jTextField1.getText()+"%");
                ResultSet myresult=mystatement.executeQuery();
                if(myresult.next())
                {
                    jTextField1.setText(myresult.getString("companyname"));
                    jTextField2.setText(myresult.getString("managername"));
                    jTextArea1.setText(myresult.getString("address"));
                    oldfilename=myresult.getString("image");//we dont have to declare olfilename again. just give memory here
                    Image simg=ImageIO.read(new File("sponsorimages//"+oldfilename)).getScaledInstance(jLabel7.getWidth(),jLabel7.getHeight(),Image.SCALE_DEFAULT);
                    jLabel7.setIcon(new ImageIcon(simg));
                    jFormattedTextField1.setText(myresult.getString("contact"));
                    jTextField3.setText(myresult.getString("email"));
                    jFormattedTextField2.setText(myresult.getString("amount"));
                    etypebox.setSelectedItem(myresult.getString("eventtype"));
                    eventbox.setSelectedItem(myresult.getString("eventname"));   
                    updatebtn.setVisible(true);
                    deletebtn.setVisible(true);
                    
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane,"Wrong Company Name");
                }
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(rootPane,"Error in Query"+e.getMessage());
            }
            finally{
                myconnection.close();
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(rootPane,"Error in connection"+e.getMessage());
        }
        
        
        
        
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnActionPerformed
        // TODO add your handling code here:
        Connection myconnection;
        try
        {
         myconnection=DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
         try
         {
             String a="delete from sponsor_detail where companyname=?";
             PreparedStatement mystatement=myconnection.prepareStatement(a);
             mystatement.setString(1,jTextField1.getText());
            int answer= JOptionPane.showConfirmDialog(rootPane,"Do you really want to Delete?","Warning",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
             if(answer==JOptionPane.YES_OPTION)//No need to remember value ask from it only
             {
                 if(mystatement.executeUpdate()==1)
                 {
                  JOptionPane.showMessageDialog(rootPane, "Deleted Successfully");
                  jTextField1.setText("");
                  jTextField2.setText("");
                  jTextArea1.setText("");
                  jFormattedTextField1.setText("");
                  jFormattedTextField2.setText("");
                  jTextField3.setText("");
                  etypebox.setSelectedIndex(0);
                  eventbox.setSelectedIndex(0);
                  jLabel7.setIcon(null);
                 File oldimage=new File("sponsorimages\\"+oldfilename);
                if(!oldimage.getName().equals("default.png"))//if oldimage is deafult not need to delete it.but if it some other image it must get deleted.
                {
                    
                    oldimage.delete();      
                }
                  
                  
                 }
                 else
                 {
                     JOptionPane.showMessageDialog(rootPane,"Sponsor not added");
                 }
             }
         }
         catch(Exception e)
         {
             JOptionPane.showMessageDialog(rootPane,"Error in Query"+e.getMessage());
         }
         finally
         {
             myconnection.close();
         }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(rootPane,"Error in Connection"+e.getMessage());
        }
        
        
        
        
        
    }//GEN-LAST:event_deletebtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deletebtn;
    private javax.swing.JComboBox<String> etypebox;
    private javax.swing.JComboBox<String> eventbox;
    private javax.swing.JButton jButton2;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JFormattedTextField jFormattedTextField2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JButton updatebtn;
    private javax.swing.JButton uploadbtn;
    // End of variables declaration//GEN-END:variables
}
